{
	"info": {
		"_postman_id": "41f8386e-2e0e-479f-b471-9d4dbec873fe",
		"name": "Саратов Егор_6337_чек-лист",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37147617",
		"_collection_link": "https://www.postman.com/flight-cosmologist-27145935/workspace/geektest-3663/collection/37147617-41f8386e-2e0e-479f-b471-9d4dbec873fe?action=share&source=collection_link&creator=37147617"
	},
	"item": [
		{
			"name": "1. Авторизация",
			"item": [
				{
					"name": "Позитивная проверка",
					"item": [
						{
							"name": "Ввести валидный логин длиной 3 символа (латинские символы и цифры, без спецсимволов)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка ID в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(41520);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка логина в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username).to.eql(\"ev8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка роли в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.roles[1]).to.eql(\"R_USER\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "ev8",
											"type": "text"
										},
										{
											"key": "password",
											"value": "d92f768c7d",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести валидный логин длиной 20 символов (латинские символы и цифры, без спецсимволов)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка ID в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(41521);\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка логина в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username).to.eql(\"egor_valerievich_sar\");\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка роли в ответе\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.roles[1]).to.eql(\"R_USER\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "egor_valerievich_sar",
											"type": "text"
										},
										{
											"key": "password",
											"value": "0f5a6a2d1b",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Негативная проверка",
					"item": [
						{
							"name": "Ввести логин с невалидными символами (спецсимволы, кириллица)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Егор\\\"№",
											"type": "text"
										},
										{
											"key": "password",
											"value": "592436e540",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести логин меньше 3 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "e1",
											"type": "text"
										},
										{
											"key": "password",
											"value": "cd3dc8b6cf",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести логин больше 20 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "dfdsfdsfsdfddfsddsfdf",
											"type": "text"
										},
										{
											"key": "password",
											"value": "14f561aaf0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Оставить поле логина пустым",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "14f561aaf0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Оставить поле пароля пустым",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "dfdsfdsfsdfddfsddsfdf",
											"type": "text"
										},
										{
											"key": "password",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Нажать кнопку \"Login\" без ввода данных",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "",
											"type": "text"
										},
										{
											"key": "password",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ввести неправильные креды и нажать \"Login\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Название ошибки при невалидных данных\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "fasdfsdf",
											"type": "text"
										},
										{
											"key": "password",
											"value": "32454545fdgsdf",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://test-stand.gb.ru/gateway/login",
									"protocol": "https",
									"host": [
										"test-stand",
										"gb",
										"ru"
									],
									"path": [
										"gateway",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Создание пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"\r",
									"//var token = pm.collectionVariables.get(\"token Student\")\r",
									"//console.log(token)\r",
									"\r",
									"pm.collectionVariables.set(\"login\", data.item.username)\r",
									"pm.collectionVariables.set(\"password\", data.item.password)\r",
									"pm.collectionVariables.set(\"id\", data.item.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "10fcc14832ffebbc76b728527b4027f1",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "firstName",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "dfdsfdsfsdfddfsddsfdf",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "79128888888",
									"type": "text"
								},
								{
									"key": "sex",
									"value": "male",
									"type": "text"
								},
								{
									"key": "birthDate",
									"value": "2022-10-01",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://test-stand.gb.ru/gateway/dummies",
							"protocol": "https",
							"host": [
								"test-stand",
								"gb",
								"ru"
							],
							"path": [
								"gateway",
								"dummies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Лента своих постов",
			"item": [
				{
					"name": "Авторизация  и переход по URL https://test-stand.gb.ru/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.collectionVariables.set (\"token\", data.token);\r",
									"\r",
									"pm.test(\"Отображение валидного ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(Number(pm.variables.get(\"id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Отображение валидного логина\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(pm.variables.get(\"login\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка наличия пункта массива\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roles[1]).to.eql(\"R_USER\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{[token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/gateway/login",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Открыть страницу блога и просмотреть превью постов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В ответе есть картинка, тайтл и описание (если они заданы))\", function () {\r",
									"\tpm.expect(pm.response.text()).to.include('\"title\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"description\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"mainImage\"');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=1",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Просмотреть посты без картинок",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Проверка наличии заглушки\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].mainImage.id).to.eql(null); \r",
									"    pm.expect(responseJson.data[0].mainImage.cdnUrl).to.be.empty; \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://test-stand.gb.ru/api/posts",
							"protocol": "https",
							"host": [
								"test-stand",
								"gb",
								"ru"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Открыть домашнюю страницу блога и проверить сортировку постов (по умолчанию от новых к старым)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"По умолчанию посты отсортированы от новых к старым\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].createdAt > responseJson.data[1].createdAt).to.eql(true)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=1",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cортировка постов от новых к старым",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID первого поста больше, чем ID последнего\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].createdAt > responseJson.data[1].createdAt).to.eql(true)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://test-stand.gb.ru/api/posts?order=DESC",
							"protocol": "https",
							"host": [
								"test-stand",
								"gb",
								"ru"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cортировка постов от старых к новым",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID первого поста больше, чем ID последнего\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].createdAt < responseJson.data[1].createdAt).to.eql(true)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://test-stand.gb.ru/api/posts?order=ASC",
							"protocol": "https",
							"host": [
								"test-stand",
								"gb",
								"ru"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "order",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отображение постов на домашней странице",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Страница отображает 10 постов при наличии 10 и более постов\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(10);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=1",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Нажать кнопку перехода на следующую страницу постов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Получаем следующую страницу\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
									"\t\tpm.expect(jsonData.meta.nextPage).to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=2",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Нажать кнопку перехода на предыдущую страницу постов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Получаем предыдущую страницу\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
									"\t\tpm.expect(jsonData.meta.nextPage).to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=1",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос страницы номер 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Получаем посты 3 страницы\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta.prevPage).to.eql(2);\r",
									"\t\tpm.expect(jsonData.meta.nextPage).to.eql(4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=3",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос несуществующей страницы",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"При переходе на несуществующую страницу получаем пустую страницу\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include('\"id\"'); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой первый блог",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Блог тестировщика",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Я учусь на тестировщика",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?page=10",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Лента чужих постов",
			"item": [
				{
					"name": "Переключить тумблер \"Not my Posts\" (просмотр чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"При задании параметра 'owner:notMe' получаем чужие посты)\", function () {\r",
									"\tpm.expect(pm.response.text()).to.include('\"title\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"description\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"mainImage\"');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Просмотреть каждый пост (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"При задании параметра 'owner:notMe' получаем чужие посты)\", function () {\r",
									"\tpm.expect(pm.response.text()).to.include('\"mainImage\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"title\"');\r",
									"    pm.expect(pm.response.text()).to.include('\"description\"');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сортировка постов от старых к новым (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ID первого поста больше, чем ID последнего\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].createdAt < responseJson.data[1].createdAt).to.eql(true)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&sort=createdAt&order=ASC",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "sort",
									"value": "createdAt"
								},
								{
									"key": "order",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сортировка постов от новых к старым (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ID первого поста больше, чем ID последнего\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data[0].createdAt > responseJson.data[1].createdAt).to.eql(true)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&sort=createdAt&order=DESC",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "sort",
									"value": "createdAt"
								},
								{
									"key": "order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сортировка постов в случайном порядке (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&sort=createdAt&order=ALL",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "sort",
									"value": "createdAt"
								},
								{
									"key": "order",
									"value": "ALL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Переход на следующую страницу постов (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Получаем следующую страницу\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
									"\t\tpm.expect(jsonData.meta.nextPage).to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&page=2",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Переход на предыдущую страницу постов (чужих постов)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Получаем следующую страницу\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
									"\t\tpm.expect(jsonData.meta.nextPage).to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&page=1",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Запрос несуществующей страницы чужих постов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"При переходе на несуществующую страницу получаем пустую страницу\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include('\"id\"'); \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								},
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe&page=20000",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								},
								{
									"key": "page",
									"value": "20000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Неавторизованный пользователь",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/gateway/login",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Открыть ленту постов других пользователей (переключив тумблер \"Not my Posts\") без авторизации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Посты не доступны без авторизации\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Auth header required X-Auth-Token\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"type": "file",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url_hw}}/api/posts/?owner=notMe",
							"host": [
								"{{url_hw}}"
							],
							"path": [
								"api",
								"posts",
								""
							],
							"query": [
								{
									"key": "owner",
									"value": "notMe"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "login",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}